{"version":3,"sources":["components/cart/constants.ts","components/cart/Cart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CartItems","id","name","image","price","quantity","Cart","useState","items","setItems","handleRemove","useCallback","filter","x","total","useMemo","reduce","accumulator","currentValue","handleQuantiyChange","event","value","target","updated","map","Number","handleIncrement","handleDecrement","handleQuantiyBlur","className","length","item","key","src","alt","disabled","onClick","data-testid","type","onChange","e","onBlur","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e6ed5f7.chunk.js","sourcesContent":["import { CartItemType } from './types';\n\nexport const CartItems: CartItemType[] = [\n    {\n      id: 'MTU1',\n      name: 'Motorola One Fusion+ (Twilight Blue, 128 GB)',\n      image: 'https://rukminim1.flixcart.com/image/224/224/kb6tyfk0/mobile/d/n/z/motorola-one-fusion-pakf0002in-original-imafsh2zf4y3kayz.jpeg?q=90',\n      price: 34998,\n      quantity: 2\n    },\n    {\n        id: 'MTU2',\n        name: 'Nova Prime series NHT 1094 Runtime',\n        image: 'https://rukminim1.flixcart.com/image/224/224/jxp08sw0/trimmer/f/c/r/prime-series-nht-1094-nova-original-imafg3hkucaydsym.jpeg?q=90',\n        price: 799,\n        quantity: 1\n      },\n]","import React, { useState, Fragment, useCallback, useMemo } from 'react';\nimport './style.css';\n\nimport { CartItems } from './constants';\nimport { CartItemType } from './types';\n\nexport const Cart: React.FC = () => {\n    const [items, setItems] = useState<CartItemType[]>(CartItems);\n    const handleRemove = useCallback(\n        (id: string) => {\n          setItems(items => items.filter(x => x.id !== id));\n        },\n        []\n    )\n    const total = useMemo(\n        () => {\n            let initialValue = 0, t = 0;\n            t = items.reduce( \n            (accumulator, currentValue) => accumulator + currentValue.price * (currentValue.quantity || 1)\n            , initialValue\n            );\n            return t;\n        },\n        [items]\n    )\n    const handleQuantiyChange = useCallback(\n       (event: React.ChangeEvent<HTMLInputElement>, id: string) => {\n        const { value } = event.target;\n        let updated = items.map(x => {\n            if(x.id === id){\n                x.quantity = Number(value);\n            }\n            \n            return x;\n        })\n        setItems(updated);\n       }, \n    [items]\n    );\n    const handleIncrement = useCallback(\n        (id: string) => {\n            let updated = items.map(x => {\n                if(x.id === id){\n                    x.quantity++;\n                }\n                return x;\n            })\n            setItems(updated);\n        },\n        [items]\n    );\n    const handleDecrement = useCallback(\n        (id: string) => {\n            let updated = items.map(x => {\n                if(x.id === id){\n                    x.quantity--;\n                }\n                return x;\n            })\n            setItems(updated);\n        },\n        [items]\n    )\n    const handleQuantiyBlur = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>, id) => {\n            const { value } = event.target;\n            if(value === '' || !value){\n                let updated = items.map(x => {\n                    if(x.id === id){\n                        x.quantity = 1;\n                    }\n                    \n                    return x;\n                })\n                setItems(updated);\n            }\n        },\n        [items]\n    );\n    return (\n        <div className=\"cart\">\n         <div className=\"cart__header\">\n         <div className=\"cart___header__title\">\n           My Cart ({items.length})\n         </div>\n         </div>\n\n         {items && items.map(item => \n             <Fragment key={item.id}>\n             <div className=\"cart__item\">\n                <div className=\"cart__item__left\">\n                <div className=\"cart__item__left__img\">\n                 <img src={item.image} alt={item.name} />\n                </div>\n\n                <div className=\"carcart__item__left__quantity\">\n                <div className=\"carcart__item__left__quantity_decrement\">\n                <button\n                 disabled={item.quantity === 1}\n                 onClick={() => handleDecrement(item.id)}\n                 className=\"circle_button\"\n                 data-testid=\"decrementBtn\"\n                 >\n                  – \n                </button>\n                </div>\n                <div className=\"carcart__item__left__quantity_input\">\n                <input\n                 type=\"text\"\n                 value={item.quantity || ''}\n                 onChange={e => handleQuantiyChange(e, item.id)}\n                 onBlur={e => handleQuantiyBlur(e, item.id)}\n                 data-testid=\"quantity\"\n                  />\n                </div>\n                <div className=\"carcart__item__left__quantity_increment\">\n                <button\n                 onClick={() => handleIncrement(item.id)}\n                 className=\"circle_button\"\n                 data-testid=\"incrementBtn\"\n                 >\n                  + \n                </button>\n                </div>\n                </div>\n\n                </div>\n\n                <div className=\"cart__item__right\">\n                <div className=\"cart__item__right_name\">\n                  {item.name}\n                </div>\n                <div className=\"cart__item__right_price\">\n                  <span>₹</span>{item.price}\n                </div>\n                <div className=\"cart__item__right__remove\">\n                  <button \n                  onClick={() => handleRemove(item.id)}\n                  className=\"cart__item__right__remove_btn\"\n                  data-testid=\"removeBtn\"\n                  >\n                  Remove\n                  </button>\n                </div>\n                </div>\n              </div>\n             </Fragment>\n            )}\n            <div className=\"cart__total\">\n            <div>Total Amount:</div>\n            <div className=\"cart__total_amount\"><span>₹</span>{total}</div>\n            </div>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\n\nimport { Cart } from './components/cart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Cart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}